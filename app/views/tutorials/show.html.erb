<%= button_tag 'Show editor', id: 'editor-button' %><div class="tutorial-section">
  <div class="title">
    <h2 id="basic-usage">Basic usage</h2>
  </div>
  <div class="content">

<p>Let&#x2019;s start with simple example:</p>

<pre><code>$ rails g model user email
</code></pre>

<p>This command will generate <em>user</em> model with <em>email</em> field type of <em>string</em>, migration which creates <em>users</em> table, test for model and factory (if you have it). You are able to generate model with few fields like this:</p>

<pre><code>$ rails g model user first_name last_name email
</code></pre>

<p>This example will generate yet model with 3 string fields: first_name, last_name and email.</p>

<p>If you want to have model with different type of string pass type after field name following by : and type. Example:</p>

<pre><code>$ rails g model user email age:integer
</code></pre>

<p>The whole list of available types:</p>

<pre><code>integer
primary_key
decimal
float
boolean
binary
string
text
date
time
datetime
timestamp
</code></pre>

<p>You are able to pass <em>&#x2013;option</em> parameter to generator. It will inherit generating class from passed name to achieve STI (sing table inheritance):</p>

<pre><code>$ rails g model admin --parent user
</code></pre>

<p>This example generates model:</p>



<p>Interesting fact that if you generate model in some scope passing model like <em>admin/user</em> or <em>Admin::User</em>:</p>

<pre><code>$ rails g model admin/user
</code></pre>

<p>you will get generated model in scope <em>app/models/admin/user.rb</em>, defined scope <em>app/models/admin.rb</em> which is requred to define module. Let&#x2019;s see to the content of generated module:</p>

<div class="highlight"><pre><code class="ruby"><span class="k">module</span> <span class="nn">Admin</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">table_name_prefix</span>
    <span class="s1">'admin_'</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>

<p>It means that generated table name for <em>Admin::User</em> starts with prefix <em>admin_users</em>. This feature allows to have separated namespaced models as in rails code as in db schema. Very convenient and useful feature for multimodule applications for my opinion.</p>

</div>
</div><div class="tutorial-section">
  <div class="title">
    <h2 id="advanced-usage">Advanced usage</h2>
  </div>
  <div class="content">

<p>Sometimes you have to automatically add index for columns in your migration. It&#x2019;s not a problem:</p>

<pre><code>$ rails g model user email:index location_id:integer:index
</code></pre>

<p>Or uniq index:</p>

<pre><code>$ rails g model user pseudo:string:uniq
</code></pre>

<p>Set limit for field of integer, string, text and binary fields:</p>

<pre><code>$ rails generate model user pseudo:string{30}
</code></pre>

<p>Special syntax to generate decimal field with scale and precision:</p>

<pre><code>$ rails generate model product 'price:decimal{10,2}'
</code></pre>

<blockquote>
  <p>Pay attention that you have to wrap parameter <code>price:decimal{10,2}</code> to quotes. It&#x2019;s vital and you may have incorrect behavior of generator if you don&#x2019;t do it. Full explanation of this case is <a href="https://github.com/rails/rails/pull/12642">here</a>.</p>
</blockquote>

<p>You can combine any single curly brace option with the index options:</p>

<pre><code>$ rails generate model user username:string{30}:uniq
</code></pre>

<p>And the last useful feature of generators - it&#x2019;s options to generate reference columns (fields which are used in rails as foreign keys):</p>

<pre><code>$ rails generate model photo album:references
</code></pre>

<p>This command will generate <em>photos</em> table with integer field <em>album_id</em> and also it will add index for this field automatically. Make sure in it by looking at generated migration:</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">CreatePhotos</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">create_table</span> <span class="ss">:photos</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="o">.</span><span class="n">references</span> <span class="ss">:album</span>

      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
    <span class="k">end</span>
    <span class="n">add_index</span> <span class="ss">:photos</span><span class="p">,</span> <span class="ss">:album_id</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>

<p>For polymorphic reference use this syntax:</p>

<pre><code>$ rails generate model product supplier:references{polymorphic}
</code></pre>

<p>Polymorphic reference with indexes:</p>

<pre><code>$ rails generate model product supplier:references{polymorphic}:index
</code></pre>

</div>
</div><div class="tutorial-section">
  <div class="title">
    <h2 id="conclusion">Conclusion</h2>
  </div>
  <div class="content">

<p>As you see there a lot of useful things in rails model generator which can decrease your developing time. Thank you for reading this trolling post but anyway I hope you find it useful because I didn&#x2019;t find any similar post or literature which describes rails model generator fully.</p>

<p>PS. Foundation for this post was got from <a href="https://github.com/rails/rails/blob/master/railties/lib/rails/generators/rails/model/USAGE">this</a> rails description usage which is located only in sources of rails on github.</p>

        
      <pre><code class="ruby"><span class="k">module</span> <span class="nn">Admin</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">table_name_prefix</span>
    <span class="s1">'admin_'</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre><pre><code class="ruby"><span class="k">class</span> <span class="nc">CreatePhotos</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">create_table</span> <span class="ss">:photos</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="o">.</span><span class="n">references</span> <span class="ss">:album</span>

      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
    <span class="k">end</span>
    <span class="n">add_index</span> <span class="ss">:photos</span><span class="p">,</span> <span class="ss">:album_id</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
</div><div id="todo-editor">
                     <%= label_tag "Select Language: " %>
                     <select id="lang">
                        <option value="c_cpp">C/C++</option>
                        <option value="ruby">Ruby</option>
                        <option value="python">Python</option>
                        <option value="java">Java</option>
                     </select> 
                     <div id="editor">function foo(items) {
                        var x = "All this is syntax highlighted"
                        return x;
                       }</div><br>
                      <%= label_tag :input %><br>
                      <%= text_area_tag :input %><br>
                      <%= label_tag :outpute %><br>
                      <%= text_area_tag :output, @output %><br>
                      <%= submit_tag "Execute", id: "code-submit"%>
                       
                  </div>